//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/6/2024 8:19:55 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=DESKTOP-J9PRHEM\SQLEXPRESS;Initial Catalog=ecommerce-db;Integrated Security=True;Persist Security Info=True");
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Category> Categories
        {
            get;
            set;
        }

        public virtual DbSet<ImageUrl> ImageUrls
        {
            get;
            set;
        }

        public virtual DbSet<Product> Products
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Review> Reviews
        {
            get;
            set;
        }

        public virtual DbSet<Shop> Shops
        {
            get;
            set;
        }

        public virtual DbSet<ShopAvatar> ShopAvatars
        {
            get;
            set;
        }

        public virtual DbSet<Gender> Genders
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.CategoryMapping(modelBuilder);
            this.CustomizeCategoryMapping(modelBuilder);

            this.ImageUrlMapping(modelBuilder);
            this.CustomizeImageUrlMapping(modelBuilder);

            this.ProductMapping(modelBuilder);
            this.CustomizeProductMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.ReviewMapping(modelBuilder);
            this.CustomizeReviewMapping(modelBuilder);

            this.ShopMapping(modelBuilder);
            this.CustomizeShopMapping(modelBuilder);

            this.ShopAvatarMapping(modelBuilder);
            this.CustomizeShopAvatarMapping(modelBuilder);

            this.GenderMapping(modelBuilder);
            this.CustomizeGenderMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Category Mapping

        private void CategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>().ToTable(@"Categories");
            modelBuilder.Entity<Category>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Category>().Property(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Category>().Property(x => x.SubTitle).HasColumnName(@"SubTitle").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Category>().Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Category>().HasKey(@"Id");
        }

        partial void CustomizeCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region ImageUrl Mapping

        private void ImageUrlMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ImageUrl>().ToTable(@"ImageUrls");
            modelBuilder.Entity<ImageUrl>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ImageUrl>().Property(x => x.PublicUrl).HasColumnName(@"PublicUrl").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ImageUrl>().Property(x => x.Url).HasColumnName(@"Url").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ImageUrl>().Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ImageUrl>().HasKey(@"Id");
        }

        partial void CustomizeImageUrlMapping(ModelBuilder modelBuilder);

        #endregion

        #region Product Mapping

        private void ProductMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>().ToTable(@"Products");
            modelBuilder.Entity<Product>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.Description).HasColumnName(@"Description").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.Price).HasColumnName(@"Price").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.DiscountPrice).HasColumnName(@"DiscountPrice").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.Rating).HasColumnName(@"Rating").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.TotalSell).HasColumnName(@"TotalSell").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.Stock).HasColumnName(@"Stock").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().Property(x => x.CategoryId).HasColumnName(@"CategoryId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Product>().HasKey(@"Id");
        }

        partial void CustomizeProductMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users");
            modelBuilder.Entity<User>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.FullName).HasColumnName(@"FullName").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Birthday).HasColumnName(@"Birthday").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Hobby).HasColumnName(@"Hobby").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"Email").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.GenderId).HasColumnName(@"GenderId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Age).HasColumnName(@"Age").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().HasKey(@"Id");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Review Mapping

        private void ReviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Review>().ToTable(@"Reviews");
            modelBuilder.Entity<Review>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Review>().Property(x => x.Comment).HasColumnName(@"Comment").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Review>().Property(x => x.Rating).HasColumnName(@"Rating").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Review>().Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Review>().Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Review>().HasKey(@"Id");
        }

        partial void CustomizeReviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region Shop Mapping

        private void ShopMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Shop>().ToTable(@"Shops");
            modelBuilder.Entity<Shop>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Shop>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Shop>().Property(x => x.Ratings).HasColumnName(@"Ratings").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Shop>().Property(x => x.ProductId).HasColumnName(@"ProductId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Shop>().HasKey(@"Id");
        }

        partial void CustomizeShopMapping(ModelBuilder modelBuilder);

        #endregion

        #region ShopAvatar Mapping

        private void ShopAvatarMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ShopAvatar>().ToTable(@"ShopAvatars");
            modelBuilder.Entity<ShopAvatar>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShopAvatar>().Property(x => x.PublicId).HasColumnName(@"PublicId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShopAvatar>().Property(x => x.Url).HasColumnName(@"Url").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShopAvatar>().Property(x => x.ShopId).HasColumnName(@"ShopId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShopAvatar>().HasKey(@"Id");
        }

        partial void CustomizeShopAvatarMapping(ModelBuilder modelBuilder);

        #endregion

        #region Gender Mapping

        private void GenderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Gender>().ToTable(@"Genders");
            modelBuilder.Entity<Gender>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Gender>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Gender>().HasKey(@"Id");
        }

        partial void CustomizeGenderMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>().HasMany(x => x.Products).WithOne(op => op.Category).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"CategoryId").IsRequired(true);

            modelBuilder.Entity<ImageUrl>().HasOne(x => x.Product).WithMany(op => op.ImageUrls).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ProductId").IsRequired(true);

            modelBuilder.Entity<Product>().HasOne(x => x.Category).WithMany(op => op.Products).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"CategoryId").IsRequired(true);
            modelBuilder.Entity<Product>().HasMany(x => x.Reviews).WithOne(op => op.Product).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ProductId").IsRequired(true);
            modelBuilder.Entity<Product>().HasOne(x => x.Shop).WithOne(op => op.Product).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(Shop), @"ProductId").IsRequired(false);
            modelBuilder.Entity<Product>().HasMany(x => x.ImageUrls).WithOne(op => op.Product).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ProductId").IsRequired(true);

            modelBuilder.Entity<User>().HasMany(x => x.Reviews).WithOne(op => op.User).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<User>().HasOne(x => x.Gender).WithOne(op => op.User).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(User), @"GenderId").IsRequired(true);

            modelBuilder.Entity<Review>().HasOne(x => x.User).WithMany(op => op.Reviews).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<Review>().HasOne(x => x.Product).WithMany(op => op.Reviews).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"ProductId").IsRequired(true);

            modelBuilder.Entity<Shop>().HasOne(x => x.Product).WithOne(op => op.Shop).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(Shop), @"ProductId").IsRequired(true);
            modelBuilder.Entity<Shop>().HasOne(x => x.ShopAvatar).WithOne(op => op.Shop).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(ShopAvatar), @"ShopId").IsRequired(false);

            modelBuilder.Entity<ShopAvatar>().HasOne(x => x.Shop).WithOne(op => op.ShopAvatar).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(ShopAvatar), @"ShopId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
