// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Repository;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240607165218_AddedShops")]
    partial class AddedShops
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubTitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Model.ImageUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublicUrl");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.ToTable("ImageUrls", (string)null);
                });

            modelBuilder.Entity("Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasColumnName("DiscountPrice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShopId");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("Stock");

                    b.Property<int>("TotalSell")
                        .HasColumnType("int")
                        .HasColumnName("TotalSell");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Model.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Model.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Ratings")
                        .HasColumnType("int")
                        .HasColumnName("Ratings");

                    b.Property<Guid>("ShopAvatarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShopAvatarId");

                    b.HasKey("Id");

                    b.ToTable("Shops", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0bf8378-bad5-4863-be62-469080d5fee9"),
                            Name = "Apple inc",
                            Ratings = 4,
                            ShopAvatarId = new Guid("794b034a-4436-439c-8e27-cf52be867493")
                        },
                        new
                        {
                            Id = new Guid("dcf11d0f-4eae-4bcb-b1a4-9225d52f9acf"),
                            Name = "Amazon Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("04cd1be4-88f6-4995-95a6-a0fb53d515d7")
                        },
                        new
                        {
                            Id = new Guid("a803c4bb-a8f3-45e2-8f10-fbcf3dc8f26e"),
                            Name = "Amazon Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("df89b20c-bbb8-4d13-bef4-ed69cca6c653")
                        },
                        new
                        {
                            Id = new Guid("c65e359a-d49d-4f76-81a2-1927baa912a4"),
                            Name = "Louis Vuitton",
                            Ratings = 4,
                            ShopAvatarId = new Guid("f26cf572-5586-46c6-827b-39d19b4977d2")
                        },
                        new
                        {
                            Id = new Guid("6bbb7da9-fc66-4af6-9f01-24821d9446d0"),
                            Name = "Shodagor Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("07dc8a14-bff1-4bf8-b4b7-0b261ceff0fa")
                        },
                        new
                        {
                            Id = new Guid("69d6458c-351e-491a-a11c-5411391a32c9"),
                            Name = "Amazon Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("dd1b0352-1ffc-49b9-adfb-fc671a6ba923")
                        },
                        new
                        {
                            Id = new Guid("864b8a17-76a0-43e9-ae68-b17db1163fed"),
                            Name = "Asus Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("397e0e12-a92a-463f-8b8a-98c3473a9211")
                        },
                        new
                        {
                            Id = new Guid("65458d06-8bac-4dd0-afc8-537ae97a86e3"),
                            Name = "Acer Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("32ec5915-aebf-4fb5-8696-6e1587d2ea15")
                        },
                        new
                        {
                            Id = new Guid("17c24b1c-9d80-4de5-ac3c-d4bc6ba6c3f2"),
                            Name = "Dove Inc",
                            Ratings = 4,
                            ShopAvatarId = new Guid("c9b6419e-7dce-448c-bef5-44e523659d81")
                        },
                        new
                        {
                            Id = new Guid("dfa9cd7a-6aab-4966-80f5-6db3418cf019"),
                            Name = "Dove Inc",
                            Ratings = 4,
                            ShopAvatarId = new Guid("b45dbcce-f6cd-4f5f-b4f9-326f0d42d9c6")
                        },
                        new
                        {
                            Id = new Guid("c453bb5d-6752-4483-8768-cfabdf308a0e"),
                            Name = "3W CLINIC",
                            Ratings = 4,
                            ShopAvatarId = new Guid("207acfc3-ef9f-4a21-83c9-72f68bb969d5")
                        },
                        new
                        {
                            Id = new Guid("a87ccf0a-8b12-4009-91fb-7d356725da2e"),
                            Name = "Vaseline Inc.",
                            Ratings = 4,
                            ShopAvatarId = new Guid("69acb09d-503f-422b-83ae-1957fa0dbe9d")
                        },
                        new
                        {
                            Id = new Guid("ac5675ca-b364-4dcc-9143-75959919b970"),
                            Name = "Tiaa Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("d3fbac34-d8b8-4597-89fe-16e84698f8a9")
                        },
                        new
                        {
                            Id = new Guid("5e05bb52-a9ec-45de-9a09-a609556be7ce"),
                            Name = "SAMSUNG",
                            Ratings = 4,
                            ShopAvatarId = new Guid("bed97ee8-1447-44c7-9bb9-0d224132fca0")
                        },
                        new
                        {
                            Id = new Guid("6b5b5d34-e881-41b1-910e-49e1e7a4eec9"),
                            Name = "SAMSUNG",
                            Ratings = 4,
                            ShopAvatarId = new Guid("02a37dbd-4372-4064-8471-5087995286d8")
                        },
                        new
                        {
                            Id = new Guid("c6ec6c1b-e1fc-47c0-afc7-d4b81864c848"),
                            Name = "Energy System",
                            Ratings = 4,
                            ShopAvatarId = new Guid("9928e6d7-9caa-42b0-89a5-79d3a1f86332")
                        },
                        new
                        {
                            Id = new Guid("dc02569a-b48b-4c30-8fd6-c9faeff3790d"),
                            Name = "Unbranded",
                            Ratings = 4,
                            ShopAvatarId = new Guid("c6c64bdc-dbb6-4732-84c9-df26c332c85c")
                        },
                        new
                        {
                            Id = new Guid("080553d4-8d8e-43eb-8a10-937980e11c41"),
                            Name = "Unik",
                            Ratings = 4,
                            ShopAvatarId = new Guid("21bc5f44-951b-46f5-b081-dc276a8559bc")
                        },
                        new
                        {
                            Id = new Guid("48c1b682-b5a8-49e9-b521-aaff15eb6db2"),
                            Name = "Oppo Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("ce2181b1-2b4d-4cf8-a057-06786a98661f")
                        },
                        new
                        {
                            Id = new Guid("a983aecc-f8d6-4988-a80f-1a1540d2d805"),
                            Name = "Lenovo Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("6d0a342c-e012-4a91-b133-1ad05984a9f3")
                        },
                        new
                        {
                            Id = new Guid("98e99411-5031-493f-9a3b-87f79a82c57a"),
                            Name = "Unik",
                            Ratings = 4,
                            ShopAvatarId = new Guid("a7432ebf-ae4b-4a06-b12a-b28bc3b29112")
                        },
                        new
                        {
                            Id = new Guid("e442c605-e0ca-4767-a64f-2dcd67ce4afd"),
                            Name = "Apple inc.",
                            Ratings = 4,
                            ShopAvatarId = new Guid("ba498934-c3d7-4f4c-a6f7-2e0b4c42ae7c")
                        },
                        new
                        {
                            Id = new Guid("08c1ff25-700e-4fb1-bad1-55d6a65cbcda"),
                            Name = "Shahriar Watch House",
                            Ratings = 4,
                            ShopAvatarId = new Guid("24a68a8f-4773-4c5e-b57c-0120be5b5dbc")
                        },
                        new
                        {
                            Id = new Guid("0174094e-d042-4dd3-9dc1-7bb14e332899"),
                            Name = "Alisha Shoes Mart",
                            Ratings = 4,
                            ShopAvatarId = new Guid("14833213-23c9-4fa2-8584-b99d5a9a414a")
                        },
                        new
                        {
                            Id = new Guid("f3728dc7-b7f3-4ef6-88d5-c254b32686c5"),
                            Name = "Shahriar Watch House",
                            Ratings = 4,
                            ShopAvatarId = new Guid("d1635ade-1890-4b65-a5d0-86ac94c38eb5")
                        },
                        new
                        {
                            Id = new Guid("eb4ad7e4-3976-407e-81c1-f24b43fe0d43"),
                            Name = "Amazon Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("85999c5d-ee20-4ec7-a9aa-7af5d1e91415")
                        },
                        new
                        {
                            Id = new Guid("312155ff-91f4-4807-9d60-022a6cb5d3a4"),
                            Name = "Asus Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("79306669-4550-4ec5-b562-9c0892ef95f7")
                        },
                        new
                        {
                            Id = new Guid("72bb4403-ddff-477c-b26c-199a3e89dc7a"),
                            Name = "Amazon Ltd",
                            Ratings = 4,
                            ShopAvatarId = new Guid("3a3f6d4f-04e4-4c14-8c56-20e7b17f575c")
                        });
                });

            modelBuilder.Entity("Model.ShopAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublicId");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShopId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.ToTable("ShopAvatars", (string)null);
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnName("Age");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("Birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gender");

                    b.Property<string>("Hobby")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hobby");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
