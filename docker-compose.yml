version: '3.4'

services:

  nginx:
    image: nginx:latest
    container_name: reverse_proxy
    volumes:
      - ./nginx/config:/etc/nginx/conf.d/
      - ./nginx/logs:/var/log/nginx/
    ports:
      - "4000:80"
      - "4001:443"
    #depends_on:
    #  - WebApi
    #  - webapi_2
    #  - webapi_3


  myredis:
    image: redis:7.0
    restart: always
    ports:
      - "6379:6379"


  mysql:
    image: mysql:8.0.22
    container_name: mysqldb
    ports:
      - "3306:3306"
    expose:
      - 3306
    volumes:
      - db-volume:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DATABASE: ecommerce-db

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    networks:
      - elastic

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.7.1
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://localhost:9200
    networks:
     - elastic


  # WebApi:
  #  image: ${DOCKER_REGISTRY-}webapi
  #  restart: always
  #  links:
  #    - mysql
  #    - myredis
  #    - elasticsearch
  #    - prometheus
  #  build:
  #    context: .
  #    dockerfile: WebApi/Dockerfile
  #  ports:
  #     - "8080"
  #  environment:
  #    - DBHOST=mysql
  #    - ASPNETCORE_ENVIRONMENT=Development
  #    - REDIS_HOST=myredis
  #    - REDIS_USER=redisroot
  #    - REDIS_PASS=redisroot
  #    - REDIS_PORT=6379
  #    - REDIS_DB=0
  #  networks:
  #   - elastic


  #webapi_2:
  #  image: ${DOCKER_REGISTRY-}webapi
  #  restart: always
  #  links:
  #    - mysql
  #    - myredis
  #    - elasticsearch
  #  build:
  #    context: .
  #    dockerfile: WebApi/Dockerfile
  #  ports:
  #     - "8080"
  #  environment:
  #    - DBHOST=mysql
  #    - ASPNETCORE_ENVIRONMENT=Development
  #    - REDIS_HOST=myredis
  #    - REDIS_USER=redisroot
  #    - REDIS_PASS=redisroot
  #    - REDIS_PORT=6379
  #    - REDIS_DB=0
  #  volumes:
  #    - volumetest:/tmp/volumetest
  #  networks:
  #   - elastic


  #webapi_3:
  #  image: ${DOCKER_REGISTRY-}webapi
  #  restart: always
  #  links:
  #    - mysql
  #    - myredis
  #    - elasticsearch
  #  build:
  #    context: .
  #    dockerfile: WebApi/Dockerfile
  #  ports:
  #     - "8080"
  #  environment:
  #    - DBHOST=mysql
  #    - ASPNETCORE_ENVIRONMENT=Development
  #    - REDIS_HOST=myredis
  #    - REDIS_USER=redisroot
  #    - REDIS_PASS=redisroot
  #    - REDIS_PORT=6379
  #    - REDIS_DB=0
  #  volumes:
  #    - volumetest:/tmp/volumetest
  #  networks:
  #   - elastic


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    #      - pushgateway:pushgateway
    depends_on:
      - cadvisor
    #      - pushgateway
    networks:
      - elastic
    restart: always
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - elastic
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - elastic
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - elastic
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - elastic
    restart: always


networks:
  elastic:
    driver: bridge

volumes:
  redis_data:
  db-volume:
  elasticsearch-data:
  prometheus_data:
  grafana_data:
